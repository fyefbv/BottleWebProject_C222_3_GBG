import unittest
from graph_operations.cycle_detector import CycleDetector

class TestCycleDetector(unittest.TestCase):
    def test_acyclic_graphs(self):
        cases = [
            # 1. Пустой граф
            (
                [], 
                []
            ),
            
            # 2. Одна вершина без ребер
            (
                [[0]], 
                []
            ),
            
            # 3. Две вершины, однонаправленное ребро
            (
                [
                    [0, 1],
                    [0, 0]
                ],
                []
            ),
            
            # 4. Три вершины, цепочка без циклов
            (
                [
                    [0, 1, 0],
                    [0, 0, 1],
                    [0, 0, 0]
                ], 
                []
            ),
            
            # 5. Граф в форме звезды
            (
                [
                    [0, 1, 1, 1], 
                    [0, 0, 0, 0], 
                    [0, 0, 0, 0], 
                    [0, 0, 0, 0]
                ], 
                []
            )
        ]

        for (matrix, expected) in cases:
            detector = CycleDetector(matrix)
            cycles = detector.find_cycles()
            self.assertEqual(cycles, expected)

    def test_simple_cycles(self):
        cases = [
            # 1. Двунаправленный цикл из двух вершин
            (
                [
                    [0, 1],
                    [1, 0]
                ],
                ['0-1-0']
            ),
            
            # 2. Треугольник
            (
                [
                    [0, 1, 0], 
                    [0, 0, 1], 
                    [1, 0, 0]
                ], 
                ['0-1-2-0']
            ),
            
            # 3. Квадрат (4 вершины)
            (
                [
                    [0, 1, 0, 0], 
                    [0, 0, 1, 0], 
                    [0, 0, 0, 1], 
                    [1, 0, 0, 0]
                ], 
                ['0-1-2-3-0']
            ),
            
            # 4. Пятивершинный цикл
            (
                [
                    [0, 1, 0, 0, 0], 
                    [0, 0, 1, 0, 0], 
                    [0, 0, 0, 1, 0], 
                    [0, 0, 0, 0, 1], 
                    [1, 0, 0, 0, 0]
                ], 
                ['0-1-2-3-4-0']
            ),
            
            # 5. Два независимых цикла
            (
                [
                    [0, 1, 0, 0], 
                    [1, 0, 0, 0], 
                    [0, 0, 0, 1], 
                    [0, 0, 1, 0]
                ], 
                ['0-1-0', '2-3-2']
            )
        ]

        for (matrix, expected) in cases:
            detector = CycleDetector(matrix)
            cycles = detector.find_cycles()
            self.assertEqual(sorted(cycles), sorted(expected))
                

    def test_complex_cycles(self):
        cases = [
            # 1. Два цикла с общей вершиной
            (
                [
                    [0, 1, 0, 0, 0],
                    [0, 0, 1, 1, 0],
                    [1, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1],
                    [0, 0, 0, 1, 0]
                ], 
                ['0-1-2-0', '3-4-3']
            ),
            
            # 2. Полный граф на 3 вершинах с дополнительной вершиной
            (
                [
                    [0, 1, 1, 1],
                    [1, 0, 1, 0],
                    [1, 1, 0, 0],
                    [1, 0, 0, 0]
                ], 
                ['0-1-0', '0-3-0', '0-1-2-0', '1-2-1']
            ),

            # 3. Треугольник и отдельный цикл
            (
                [
                    [0, 1, 0, 0, 0],
                    [0, 0, 1, 0, 0],
                    [1, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1],
                    [0, 0, 0, 1, 0]
                ], 
                ['0-1-2-0', '3-4-3']
            ),

            # 4. Граф с пересекающимися циклами и общей вершиной
            (
                [
                    [0, 1, 1, 0, 0],
                    [0, 0, 1, 1, 0],
                    [1, 0, 0, 1, 0],
                    [0, 0, 0, 0, 1],
                    [1, 0, 0, 0, 0]
                ], 
                ['0-1-2-0', '0-1-2-3-4-0']
            ),

            # 5. Граф с вложенными циклами
            (
                [
                    [0, 1, 0, 0, 0, 0],
                    [0, 0, 1, 1, 0, 0],
                    [1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 1],
                    [0, 0, 0, 1, 0, 1],
                    [0, 0, 0, 1, 1, 0]
                ], 
                ['0-1-2-0', '3-4-5-3', '3-4-3', '4-5-4']
            )
        ]

        for (matrix, expected) in cases:
            detector = CycleDetector(matrix)
            cycles = detector.find_cycles()
            self.assertEqual(sorted(cycles), sorted(expected))

if __name__ == '__main__':
    unittest.main()